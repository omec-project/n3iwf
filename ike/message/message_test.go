// Copyright 2020 free5GC.org
//
// SPDX-License-Identifier: Apache-2.0

package message

import (
	"bytes"
	"reflect"
	"testing"
)

// Helper function for comparing IKEMessage and byte slices
func compareIKEMessage(t *testing.T, ikeMsg *IKEMessage, expIKEMsg *IKEMessage, expErr bool, err error) {
	t.Helper()
	if expErr {
		if err == nil {
			t.Error("Expected error but got none")
		}
	} else {
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if !reflect.DeepEqual(expIKEMsg, ikeMsg) {
			t.Errorf("IKEMessage mismatch. got = %+v, want = %+v", ikeMsg, expIKEMsg)
		}
	}
}

func compareEncodeResult(t *testing.T, result []byte, expByte []byte, expErr bool, err error) {
	t.Helper()
	if expErr {
		if err == nil {
			t.Error("Expected error but got none")
		}
	} else {
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
		}
		if !bytes.Equal(expByte, result) {
			t.Errorf("Encoded bytes mismatch. got = %v, want = %v", result, expByte)
		}
	}
}

// TestEncodeDecodeUsingPublicData tests the Encode() and Decode() function using the public data.
// Decode and encode the data, and compare the verifyData and the origin
// data and return the result.
func TestEncodeDecodeUsingPublicData(t *testing.T) {
	data := []byte{
		0x86, 0x43, 0x30, 0xac, 0x30, 0xe6, 0x56, 0x4d, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x20, 0x22, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc9, 0x22, 0x00, 0x00,
		0x30, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x01, 0x00, 0x04, 0x03, 0x00,
		0x00, 0x0c, 0x01, 0x00, 0x00, 0x0c, 0x80, 0x0e, 0x00, 0x80,
		0x03, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00,
		0x08, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x04,
		0x00, 0x00, 0x02, 0x28, 0x00, 0x00, 0x88, 0x00, 0x02, 0x00, 0x00,
		0x03, 0xdc, 0xf5, 0x9a, 0x29, 0x05, 0x7b, 0x5a, 0x49, 0xbd,
		0x55, 0x8c, 0x9b, 0x14, 0x7a, 0x11, 0x0e, 0xed, 0xff, 0xe5, 0xea,
		0x2d, 0x12, 0xc2, 0x1e, 0x5c, 0x7a, 0x5f, 0x5e, 0x9c, 0x99,
		0xe3, 0xd1, 0xd3, 0x00, 0x24, 0x3c, 0x89, 0x73, 0x1e, 0x6c, 0x6d,
		0x63, 0x41, 0x7b, 0x33, 0xfa, 0xaf, 0x5a, 0xc7, 0x26, 0xe8,
		0xb6, 0xf8, 0xc3, 0xb5, 0x2a, 0x14, 0xeb, 0xec, 0xd5, 0x6f, 0x1b,
		0xd9, 0x5b, 0x28, 0x32, 0x84, 0x9e, 0x26, 0xfc, 0x59, 0xee,
		0xf1, 0x4e, 0x38, 0x5f, 0x55, 0xc2, 0x1b, 0xe8, 0xf6, 0xa3, 0xfb,
		0xc5, 0x55, 0xd7, 0x35, 0x92, 0x86, 0x24, 0x00, 0x62, 0x8b,
		0xea, 0xce, 0x23, 0xf0, 0x47, 0xaf, 0xaa, 0xf8, 0x61, 0xe4, 0x5c,
		0x42, 0xba, 0x5c, 0xa1, 0x4a, 0x52, 0x6e, 0xd8, 0xe8, 0xf1,
		0xb9, 0x74, 0xae, 0xe4, 0xd1, 0x9c, 0x9f, 0xa5, 0x9b, 0xf0, 0xd7,
		0xdb, 0x55, 0x2b, 0x00, 0x00, 0x44, 0x4c, 0xa7, 0xf3, 0x9b,
		0xcd, 0x1d, 0xc2, 0x01, 0x79, 0xfa, 0xa2, 0xe4, 0x72, 0xe0, 0x61,
		0xc4, 0x45, 0x61, 0xe6, 0x49, 0x2d, 0xb3, 0x96, 0xae, 0xc9,
		0x2c, 0xdb, 0x54, 0x21, 0xf4, 0x98, 0x4f, 0x72, 0xd2, 0x43, 0x78,
		0xab, 0x80, 0xe4, 0x6c, 0x01, 0x78, 0x6a, 0xc4, 0x64, 0x45,
		0xbc, 0xa8, 0x1f, 0x56, 0xbc, 0xed, 0xf9, 0xb5, 0xd8, 0x21, 0x95,
		0x41, 0x71, 0xe9, 0x0e, 0xb4, 0x3c, 0x4e, 0x2b, 0x00, 0x00,
		0x17, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x2d, 0x44, 0x45, 0x4c, 0x45,
		0x54, 0x45, 0x2d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x2b,
		0x00, 0x00, 0x3b, 0x43, 0x49, 0x53, 0x43, 0x4f, 0x28, 0x43, 0x4f,
		0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x29, 0x26, 0x43,
		0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x63,
		0x29, 0x20, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x69, 0x73,
		0x63, 0x6f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2c,
		0x20, 0x49, 0x6e, 0x63, 0x2e, 0x29, 0x00, 0x00, 0x13, 0x43,
		0x49, 0x53, 0x43, 0x4f, 0x2d, 0x47, 0x52, 0x45, 0x2d, 0x4d, 0x4f,
		0x44, 0x45, 0x02, 0x29, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x40,
		0x04, 0x7e, 0x57, 0x6c, 0xc0, 0x13, 0xd4, 0x05, 0x43, 0xa2, 0xe8,
		0x77, 0x7d, 0x00, 0x34, 0x68, 0xa5, 0xb1, 0x89, 0x0c, 0x58,
		0x2b, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x40, 0x05, 0x52, 0x64, 0x4d,
		0x87, 0xd4, 0x7c, 0x2d, 0x44, 0x23, 0xbd, 0x37, 0xe4, 0x48,
		0xa9, 0xf5, 0x17, 0x01, 0x81, 0xcb, 0x8a, 0x00, 0x00, 0x00, 0x14,
		0x40, 0x48, 0xb7, 0xd5, 0x6e, 0xbc, 0xe8, 0x85, 0x25, 0xe7,
		0xde, 0x7f, 0x00, 0xd6, 0xc2, 0xd3,
	}

	ikeMsg := new(IKEMessage)
	err := ikeMsg.Decode(data)
	if err != nil {
		t.Fatalf("Decode failed: %+v", err)
	}

	verifyData, err := ikeMsg.Encode()
	if err != nil {
		t.Fatalf("Encode failed: %+v", err)
	}

	if !bytes.Equal(data, verifyData) {
		t.FailNow()
	}
}

var (
	validIKEINIT = &IKEMessage{
		IKEHeader: &IKEHeader{
			InitiatorSPI: 0x000000000006f708,
			ResponderSPI: 0xc9e2e31f8b64053d,
			MajorVersion: 2,
			MinorVersion: 0,
			ExchangeType: IKE_SA_INIT,
			Flags:        InitiatorBitCheck,
			MessageID:    0x00,
			NextPayload:  TypeSA,
			PayloadBytes: []byte{
				0x29, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x37,
				0x02, 0x01, 0x03, 0x05, 0x01, 0x02, 0x03, 0x03,
				0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x0c, 0x80,
				0x0e, 0x00, 0x80, 0x03, 0x00, 0x00, 0x08, 0x02,
				0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x08, 0x03,
				0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x08, 0x04,
				0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x05,
				0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x1f, 0x00,
				0x03, 0x40, 0x04, 0x01, 0x02, 0x03, 0x50, 0xc4,
				0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16, 0x19, 0x24,
				0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6, 0x46, 0xd8,
				0x9d, 0x75, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x03,
				0x40, 0x05, 0x01, 0x02, 0x03, 0x50, 0xc4, 0xc2,
				0xbe, 0x8e, 0x3f, 0xd9, 0x16, 0x19, 0x24, 0x65,
				0x0d, 0x14, 0x5d, 0x4f, 0xf6, 0x46, 0xd8, 0x9d,
				0x75,
			},
		},
		Payloads: IKEPayloadContainer{
			&SecurityAssociation{
				Proposals: ProposalContainer{
					&Proposal{
						ProposalNumber: 2,
						ProtocolID:     1,
						SPI:            []byte{1, 2, 3},
						EncryptionAlgorithm: TransformContainer{
							&Transform{
								TransformType:    TypeEncryptionAlgorithm,
								TransformID:      ENCR_AES_CBC,
								AttributePresent: true,
								AttributeFormat:  AttributeFormatUseTV,
								AttributeType:    AttributeTypeKeyLength,
								AttributeValue:   128,
							},
						},
						IntegrityAlgorithm: TransformContainer{
							&Transform{
								TransformType:    TypeIntegrityAlgorithm,
								TransformID:      AUTH_HMAC_SHA2_256_128,
								AttributePresent: false,
								AttributeType:    0,
								AttributeValue:   0,
							},
						},
						DiffieHellmanGroup: TransformContainer{
							&Transform{
								TransformType:    TypeDiffieHellmanGroup,
								TransformID:      DH_1024_BIT_MODP,
								AttributePresent: false,
								AttributeType:    0,
								AttributeValue:   0,
							},
						},
						PseudorandomFunction: TransformContainer{
							&Transform{
								TransformType:    TypePseudorandomFunction,
								TransformID:      PRF_HMAC_SHA2_256,
								AttributePresent: false,
								AttributeType:    0,
								AttributeValue:   0,
							},
						},
						ExtendedSequenceNumbers: TransformContainer{
							&Transform{
								TransformType:    TypeExtendedSequenceNumbers,
								TransformID:      ESN_DISABLE,
								AttributePresent: false,
								AttributeType:    0,
								AttributeValue:   0,
							},
						},
					},
				},
			},
			&Notification{
				ProtocolID:        TypeNone,
				NotifyMessageType: NAT_DETECTION_SOURCE_IP,
				SPI:               []byte{0x01, 0x02, 0x03},
				NotificationData: []byte{
					0x50, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16,
					0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6,
					0x46, 0xd8, 0x9d, 0x75,
				},
			},
			&Notification{
				ProtocolID:        TypeNone,
				NotifyMessageType: NAT_DETECTION_DESTINATION_IP,
				SPI:               []byte{0x01, 0x02, 0x03},
				NotificationData: []byte{
					0x50, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16,
					0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6,
					0x46, 0xd8, 0x9d, 0x75,
				},
			},
		},
	}

	validIKEINITByte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf7, 0x08,
		0xc9, 0xe2, 0xe3, 0x1f, 0x8b, 0x64, 0x05, 0x3d,
		0x21, 0x20, 0x22, 0x08, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x95, 0x29, 0x00, 0x00, 0x3b,
		0x00, 0x00, 0x00, 0x37, 0x02, 0x01, 0x03, 0x05,
		0x01, 0x02, 0x03, 0x03, 0x00, 0x00, 0x0c, 0x01,
		0x00, 0x00, 0x0c, 0x80, 0x0e, 0x00, 0x80, 0x03,
		0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x05, 0x03,
		0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x0c, 0x03,
		0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x02, 0x00,
		0x00, 0x00, 0x08, 0x05, 0x00, 0x00, 0x00, 0x29,
		0x00, 0x00, 0x1f, 0x00, 0x03, 0x40, 0x04, 0x01,
		0x02, 0x03, 0x50, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f,
		0xd9, 0x16, 0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d,
		0x4f, 0xf6, 0x46, 0xd8, 0x9d, 0x75, 0x00, 0x00,
		0x00, 0x1f, 0x00, 0x03, 0x40, 0x05, 0x01, 0x02,
		0x03, 0x50, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9,
		0x16, 0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f,
		0xf6, 0x46, 0xd8, 0x9d, 0x75,
	}

	validCreateChildSA = &IKEMessage{
		IKEHeader: &IKEHeader{
			InitiatorSPI: 0x000000000006f708,
			ResponderSPI: 0xc9e2e31f8b64053d,
			MajorVersion: 2,
			MinorVersion: 0,
			ExchangeType: CREATE_CHILD_SA,
			MessageID:    0x00,
			NextPayload:  TypeTSi,
			PayloadBytes: []byte{
				0x2d, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0xff, 0xff,
				0x0a, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x01,
				0x29, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x00, 0x10, 0x00, 0x00, 0xff, 0xff,
				0x0a, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0xd8, 0xcd,
				0x05, 0x01, 0x01, 0x01, 0x02,
			},
		},
		Payloads: IKEPayloadContainer{
			&TrafficSelectorInitiator{
				IndividualTrafficSelectorContainer{
					&IndividualTrafficSelector{
						TSType:       TS_IPV4_ADDR_RANGE,
						IPProtocolID: IPProtocolAll,
						StartPort:    0,
						EndPort:      65535,
						StartAddress: []byte{0x0a, 0x00, 0x00, 0x01},
						EndAddress:   []byte{0x0a, 0x00, 0x00, 0x01},
					},
				},
			},
			&TrafficSelectorResponder{
				IndividualTrafficSelectorContainer{
					&IndividualTrafficSelector{
						TSType:       TS_IPV4_ADDR_RANGE,
						IPProtocolID: IPProtocolAll,
						StartPort:    0,
						EndPort:      65535,
						StartAddress: []byte{0x0a, 0x00, 0x00, 0x01},
						EndAddress:   []byte{0x0a, 0x00, 0x00, 0x01},
					},
				},
			},
			&Notification{
				NotifyMessageType: Vendor3GPPNotifyType5G_QOS_INFO,
				NotificationData:  []byte{0x05, 0x01, 0x01, 0x01, 0x02},
			},
		},
	}

	validCreateChildSAByte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf7, 0x08,
		0xc9, 0xe2, 0xe3, 0x1f, 0x8b, 0x64, 0x05, 0x3d,
		0x2c, 0x20, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x59, 0x2d, 0x00, 0x00, 0x18,
		0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x10,
		0x00, 0x00, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x01,
		0x0a, 0x00, 0x00, 0x01, 0x29, 0x00, 0x00, 0x18,
		0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x10,
		0x00, 0x00, 0xff, 0xff, 0x0a, 0x00, 0x00, 0x01,
		0x0a, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d,
		0x00, 0x00, 0xd8, 0xcd, 0x05, 0x01, 0x01, 0x01,
		0x02,
	}

	validInformation = &IKEMessage{
		IKEHeader: &IKEHeader{
			InitiatorSPI: 0x000000000006f708,
			ResponderSPI: 0xc9e2e31f8b64053d,
			MajorVersion: 2,
			MinorVersion: 0,
			ExchangeType: INFORMATIONAL,
			Flags:        InitiatorBitCheck | ResponseBitCheck,
			MessageID:    0x07,
			NextPayload:  TypeN,
			PayloadBytes: []byte{
				0x29, 0x00, 0x00, 0x1f, 0x00, 0x03, 0x40, 0x04,
				0x01, 0x02, 0x03, 0x50, 0xc4, 0xc2, 0xbe, 0x8e,
				0x3f, 0xd9, 0x16, 0x19, 0x24, 0x65, 0x0d, 0x14,
				0x5d, 0x4f, 0xf6, 0x46, 0xd8, 0x9d, 0x75, 0x00,
				0x00, 0x00, 0x1b, 0x00, 0x03, 0x40, 0x05, 0x01,
				0x02, 0x03, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9,
				0x16, 0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f,
				0xf6, 0x46,
			},
		},
		Payloads: IKEPayloadContainer{
			&Notification{
				ProtocolID:        TypeNone,
				NotifyMessageType: NAT_DETECTION_SOURCE_IP,
				SPI:               []byte{0x01, 0x02, 0x03},
				NotificationData: []byte{
					0x50, 0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16,
					0x19, 0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6,
					0x46, 0xd8, 0x9d, 0x75,
				},
			},
			&Notification{
				ProtocolID:        TypeNone,
				NotifyMessageType: NAT_DETECTION_DESTINATION_IP,
				SPI:               []byte{0x01, 0x02, 0x03},
				NotificationData: []byte{
					0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16, 0x19,
					0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6, 0x46,
				},
			},
		},
	}

	validInformationByte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf7, 0x08,
		0xc9, 0xe2, 0xe3, 0x1f, 0x8b, 0x64, 0x05, 0x3d,
		0x29, 0x20, 0x25, 0x28, 0x00, 0x00, 0x00, 0x07,
		0x00, 0x00, 0x00, 0x56, 0x29, 0x00, 0x00, 0x1f,
		0x00, 0x03, 0x40, 0x04, 0x01, 0x02, 0x03, 0x50,
		0xc4, 0xc2, 0xbe, 0x8e, 0x3f, 0xd9, 0x16, 0x19,
		0x24, 0x65, 0x0d, 0x14, 0x5d, 0x4f, 0xf6, 0x46,
		0xd8, 0x9d, 0x75, 0x00, 0x00, 0x00, 0x1b, 0x00,
		0x03, 0x40, 0x05, 0x01, 0x02, 0x03, 0xc4, 0xc2,
		0xbe, 0x8e, 0x3f, 0xd9, 0x16, 0x19, 0x24, 0x65,
		0x0d, 0x14, 0x5d, 0x4f, 0xf6, 0x46,
	}

	validIKEAUTH = &IKEMessage{
		IKEHeader: &IKEHeader{
			InitiatorSPI: 0x000000000006f708,
			ResponderSPI: 0xc9e2e31f8b64053d,
			MajorVersion: 2,
			MinorVersion: 0,
			ExchangeType: IKE_AUTH,
			Flags:        ResponseBitCheck,
			MessageID:    0x03,
			NextPayload:  TypeSK,
			PayloadBytes: []byte{
				0x30, 0x00, 0x00, 0x50, 0xec, 0x50, 0x31, 0x16,
				0x2c, 0x69, 0x2f, 0xbb, 0xfc, 0x4d, 0x20, 0x64,
				0x0c, 0x91, 0x21, 0xeb, 0xe9, 0x47, 0x5e, 0xf9,
				0x4f, 0x9b, 0x02, 0x95, 0x9d, 0x31, 0x24, 0x2e,
				0x53, 0x5e, 0x9c, 0x3c, 0x4d, 0xca, 0xec, 0xd1,
				0xbf, 0xd6, 0xdd, 0x80, 0xaa, 0x81, 0x2b, 0x07,
				0xde, 0x36, 0xde, 0xe9, 0xb7, 0x50, 0x94, 0x35,
				0xf6, 0x35, 0xe1, 0xaa, 0xae, 0x1c, 0x38, 0x25,
				0xf4, 0xea, 0xe3, 0x38, 0x49, 0x03, 0xf7, 0x24,
				0xf4, 0x44, 0x17, 0x0c, 0x68, 0x45, 0xca, 0x80,
			},
		},
		Payloads: IKEPayloadContainer{
			&Encrypted{
				NextPayload: TypeEAP,
				EncryptedData: []byte{
					0xec, 0x50, 0x31, 0x16, 0x2c, 0x69, 0x2f, 0xbb,
					0xfc, 0x4d, 0x20, 0x64, 0x0c, 0x91, 0x21, 0xeb,
					0xe9, 0x47, 0x5e, 0xf9, 0x4f, 0x9b, 0x02, 0x95,
					0x9d, 0x31, 0x24, 0x2e, 0x53, 0x5e, 0x9c, 0x3c,
					0x4d, 0xca, 0xec, 0xd1, 0xbf, 0xd6, 0xdd, 0x80,
					0xaa, 0x81, 0x2b, 0x07, 0xde, 0x36, 0xde, 0xe9,
					0xb7, 0x50, 0x94, 0x35, 0xf6, 0x35, 0xe1, 0xaa,
					0xae, 0x1c, 0x38, 0x25, 0xf4, 0xea, 0xe3, 0x38,
					0x49, 0x03, 0xf7, 0x24, 0xf4, 0x44, 0x17, 0x0c,
					0x68, 0x45, 0xca, 0x80,
				},
			},
		},
	}
	validIKEAUTHByte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf7, 0x08,
		0xc9, 0xe2, 0xe3, 0x1f, 0x8b, 0x64, 0x05, 0x3d,
		0x2e, 0x20, 0x23, 0x20, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x6c, 0x30, 0x00, 0x00, 0x50,
		0xec, 0x50, 0x31, 0x16, 0x2c, 0x69, 0x2f, 0xbb,
		0xfc, 0x4d, 0x20, 0x64, 0x0c, 0x91, 0x21, 0xeb,
		0xe9, 0x47, 0x5e, 0xf9, 0x4f, 0x9b, 0x02, 0x95,
		0x9d, 0x31, 0x24, 0x2e, 0x53, 0x5e, 0x9c, 0x3c,
		0x4d, 0xca, 0xec, 0xd1, 0xbf, 0xd6, 0xdd, 0x80,
		0xaa, 0x81, 0x2b, 0x07, 0xde, 0x36, 0xde, 0xe9,
		0xb7, 0x50, 0x94, 0x35, 0xf6, 0x35, 0xe1, 0xaa,
		0xae, 0x1c, 0x38, 0x25, 0xf4, 0xea, 0xe3, 0x38,
		0x49, 0x03, 0xf7, 0x24, 0xf4, 0x44, 0x17, 0x0c,
		0x68, 0x45, 0xca, 0x80,
	}
)

func TestDecode(t *testing.T) {
	testcases := []struct {
		description string
		b           []byte
		expErr      bool
		expIkeMsg   *IKEMessage
	}{
		{
			description: "decode IKE_INIT",
			b:           validIKEINITByte,
			expIkeMsg:   validIKEINIT,
			expErr:      false,
		},
		{
			description: "decode Create_CHILD_SA",
			b:           validCreateChildSAByte,
			expIkeMsg:   validCreateChildSA,
			expErr:      false,
		},
		{
			description: "decode INFORMATION",
			b:           validInformationByte,
			expIkeMsg:   validInformation,
			expErr:      false,
		},
		{
			description: "decode IKE_AUTH",
			b:           validIKEAUTHByte,
			expIkeMsg:   validIKEAUTH,
			expErr:      false,
		},
		{
			description: "decode with short length message",
			b: []byte{
				0x01, 0x02, 0x03, 0x04, 0x05,
			},
			expErr: true,
		},
	}

	for _, tc := range testcases {
		t.Run(tc.description, func(t *testing.T) {
			ikeMsg := new(IKEMessage)
			err := ikeMsg.Decode(tc.b)
			compareIKEMessage(t, ikeMsg, tc.expIkeMsg, tc.expErr, err)
		})
	}
}

func TestEncode(t *testing.T) {
	testcases := []struct {
		description string
		ikeMsg      *IKEMessage
		expErr      bool
		expByte     []byte
	}{
		{
			description: "IKE_INIT encode",
			ikeMsg:      validIKEINIT,
			expErr:      false,
			expByte:     validIKEINITByte,
		},
		{
			description: "IKE_AUTH encode",
			ikeMsg:      validIKEAUTH,
			expErr:      false,
			expByte:     validIKEAUTHByte,
		},
		{
			description: "INFORMATIONAL encode",
			ikeMsg:      validInformation,
			expErr:      false,
			expByte:     validInformationByte,
		},
		{
			description: "Create_Child_SA encode",
			ikeMsg:      validCreateChildSA,
			expErr:      false,
			expByte:     validCreateChildSAByte,
		},
	}

	for _, tc := range testcases {
		t.Run(tc.description, func(t *testing.T) {
			result, err := tc.ikeMsg.Encode()
			compareEncodeResult(t, result, tc.expByte, tc.expErr, err)
		})
	}
}

func TestNewAndEncodeIKEHeader(t *testing.T) {
	m := NewMessage(
		0x000000000006f708, 0xc9e2e31f8b64053d, IKE_AUTH,
		true, false, 0x03, IKEPayloadContainer{
			&Encrypted{
				NextPayload: TypeEAP,
				EncryptedData: []byte{
					0xec, 0x50, 0x31, 0x16, 0x2c, 0x69, 0x2f, 0xbb,
					0xfc, 0x4d, 0x20, 0x64, 0x0c, 0x91, 0x21, 0xeb,
					0xe9, 0x47, 0x5e, 0xf9, 0x4f, 0x9b, 0x02, 0x95,
					0x9d, 0x31, 0x24, 0x2e, 0x53, 0x5e, 0x9c, 0x3c,
					0x4d, 0xca, 0xec, 0xd1, 0xbf, 0xd6, 0xdd, 0x80,
					0xaa, 0x81, 0x2b, 0x07, 0xde, 0x36, 0xde, 0xe9,
					0xb7, 0x50, 0x94, 0x35, 0xf6, 0x35, 0xe1, 0xaa,
					0xae, 0x1c, 0x38, 0x25, 0xf4, 0xea, 0xe3, 0x38,
					0x49, 0x03, 0xf7, 0x24, 0xf4, 0x44, 0x17, 0x0c,
					0x68, 0x45, 0xca, 0x80,
				},
			},
		},
	)
	expected := &IKEMessage{
		IKEHeader: &IKEHeader{
			InitiatorSPI: 0x000000000006f708,
			ResponderSPI: 0xc9e2e31f8b64053d,
			MajorVersion: 2,
			MinorVersion: 0,
			ExchangeType: IKE_AUTH,
			Flags:        ResponseBitCheck,
			MessageID:    0x03,
			NextPayload:  NoNext,
		},
		Payloads: IKEPayloadContainer{
			&Encrypted{
				NextPayload: TypeEAP,
				EncryptedData: []byte{
					0xec, 0x50, 0x31, 0x16, 0x2c, 0x69, 0x2f, 0xbb,
					0xfc, 0x4d, 0x20, 0x64, 0x0c, 0x91, 0x21, 0xeb,
					0xe9, 0x47, 0x5e, 0xf9, 0x4f, 0x9b, 0x02, 0x95,
					0x9d, 0x31, 0x24, 0x2e, 0x53, 0x5e, 0x9c, 0x3c,
					0x4d, 0xca, 0xec, 0xd1, 0xbf, 0xd6, 0xdd, 0x80,
					0xaa, 0x81, 0x2b, 0x07, 0xde, 0x36, 0xde, 0xe9,
					0xb7, 0x50, 0x94, 0x35, 0xf6, 0x35, 0xe1, 0xaa,
					0xae, 0x1c, 0x38, 0x25, 0xf4, 0xea, 0xe3, 0x38,
					0x49, 0x03, 0xf7, 0x24, 0xf4, 0x44, 0x17, 0x0c,
					0x68, 0x45, 0xca, 0x80,
				},
			},
		},
	}
	if !reflect.DeepEqual(m, expected) {
		t.Errorf("NewMessage result mismatch. got = %+v, want = %+v", m, expected)
	}
	if m.IsInitiator() {
		t.Error("Expected IsInitiator() to be false, but got true")
	}
	if !m.IsResponse() {
		t.Error("Expected IsResponse() to be true, but got false")
	}

	b, err := m.Encode()
	if err != nil {
		t.Errorf("Encode failed: %v", err)
	}
	expectedBytes := []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf7, 0x08,
		0xc9, 0xe2, 0xe3, 0x1f, 0x8b, 0x64, 0x05, 0x3d,
		0x2e, 0x20, 0x23, 0x20, 0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x6c, 0x30, 0x00, 0x00, 0x50,
		0xec, 0x50, 0x31, 0x16, 0x2c, 0x69, 0x2f, 0xbb,
		0xfc, 0x4d, 0x20, 0x64, 0x0c, 0x91, 0x21, 0xeb,
		0xe9, 0x47, 0x5e, 0xf9, 0x4f, 0x9b, 0x02, 0x95,
		0x9d, 0x31, 0x24, 0x2e, 0x53, 0x5e, 0x9c, 0x3c,
		0x4d, 0xca, 0xec, 0xd1, 0xbf, 0xd6, 0xdd, 0x80,
		0xaa, 0x81, 0x2b, 0x07, 0xde, 0x36, 0xde, 0xe9,
		0xb7, 0x50, 0x94, 0x35, 0xf6, 0x35, 0xe1, 0xaa,
		0xae, 0x1c, 0x38, 0x25, 0xf4, 0xea, 0xe3, 0x38,
		0x49, 0x03, 0xf7, 0x24, 0xf4, 0x44, 0x17, 0x0c,
		0x68, 0x45, 0xca, 0x80,
	}
	if !bytes.Equal(b, expectedBytes) {
		t.Errorf("Encoded bytes mismatch. got = %v, want = %v", b, expectedBytes)
	}
}
